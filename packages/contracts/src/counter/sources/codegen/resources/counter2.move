  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module counter::counter2 {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use counter::dapp_key;

  use counter::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"counter2";

  const TABLE_TYPE: vector<u8> = b"Resource";

  const OFFCHAIN: bool = false;

  public fun get_table_id(): String {
    string(TABLE_NAME)
  }

  public fun get_key_schemas(): vector<String> {
    vector[]
  }

  public fun get_value_schemas(): vector<String> {
    vector[
    string(b"u32")
    ]
  }

  public fun get_key_names(): vector<String> {
    vector[]
  }

  public fun get_value_names(): vector<String> {
    vector[
    string(b"value")
    ]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_system::register_table(
            dapp_hub,
             dapp_key,
            string(TABLE_TYPE),
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            OFFCHAIN,
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_system::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_system::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_system::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub) {
    let key_tuple = vector::empty();
    dapp_system::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, OFFCHAIN);
  }

  public fun get(dapp_hub: &DappHub): u32 {
    let key_tuple = vector::empty();
    let value = dapp_system::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let value = sui::bcs::peel_u32(&mut bsc_type);
    value
  }

  public(package) fun set(dapp_hub: &mut DappHub, value: u32) {
    let key_tuple = vector::empty();
    let value_tuple = encode(value);
    dapp_system::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun encode(value: u32): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&value));
    value_tuple
  }
}
