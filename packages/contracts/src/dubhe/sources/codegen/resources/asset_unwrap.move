  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::asset_unwrap {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use dubhe::dapp_key;

  use dubhe::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"asset_unwrap";

  const TABLE_TYPE: vector<u8> = b"Resource";

  const OFFCHAIN: bool = true;

  public struct AssetUnwrap has copy, drop, store {
    from: address,
    to: address,
    amount: u256,
    coin_type: String,
    asset_id: address,
  }

  public fun new(from: address, to: address, amount: u256, coin_type: String, asset_id: address): AssetUnwrap {
    AssetUnwrap {
            from,
            to,
            amount,
            coin_type,
            asset_id,
        }
  }

  public fun from(self: &AssetUnwrap): address {
    self.from
  }

  public fun to(self: &AssetUnwrap): address {
    self.to
  }

  public fun amount(self: &AssetUnwrap): u256 {
    self.amount
  }

  public fun coin_type(self: &AssetUnwrap): String {
    self.coin_type
  }

  public fun asset_id(self: &AssetUnwrap): address {
    self.asset_id
  }

  public fun update_from(self: &mut AssetUnwrap, from: address) {
    self.from = from
  }

  public fun update_to(self: &mut AssetUnwrap, to: address) {
    self.to = to
  }

  public fun update_amount(self: &mut AssetUnwrap, amount: u256) {
    self.amount = amount
  }

  public fun update_coin_type(self: &mut AssetUnwrap, coin_type: String) {
    self.coin_type = coin_type
  }

  public fun update_asset_id(self: &mut AssetUnwrap, asset_id: address) {
    self.asset_id = asset_id
  }

  public fun get_table_id(): String {
    string(TABLE_NAME)
  }

  public fun get_key_schemas(): vector<String> {
    vector[]
  }

  public fun get_value_schemas(): vector<String> {
    vector[string(b"address"), string(b"address"), string(b"u256"), string(b"String"),
    string(b"address")
    ]
  }

  public fun get_key_names(): vector<String> {
    vector[]
  }

  public fun get_value_names(): vector<String> {
    vector[string(b"from"), string(b"to"), string(b"amount"), string(b"coin_type"),
    string(b"asset_id")
    ]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub,
             dapp_key,
            string(TABLE_TYPE),
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            OFFCHAIN,
            ctx
        );
  }

  public(package) fun set(
    dapp_hub: &mut DappHub,
    from: address,
    to: address,
    amount: u256,
    coin_type: String,
    asset_id: address,
  ) {
    let key_tuple = vector::empty();
    let value_tuple = encode(from, to, amount, coin_type, asset_id);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public(package) fun set_struct(dapp_hub: &mut DappHub, asset_unwrap: AssetUnwrap) {
    let key_tuple = vector::empty();
    let value_tuple = encode_struct(asset_unwrap);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun encode(
    from: address,
    to: address,
    amount: u256,
    coin_type: String,
    asset_id: address,
  ): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&from));
    value_tuple.push_back(to_bytes(&to));
    value_tuple.push_back(to_bytes(&amount));
    value_tuple.push_back(to_bytes(&into_bytes(coin_type)));
    value_tuple.push_back(to_bytes(&asset_id));
    value_tuple
  }

  public fun encode_struct(asset_unwrap: AssetUnwrap): vector<vector<u8>> {
    encode(asset_unwrap.from, asset_unwrap.to, asset_unwrap.amount, asset_unwrap.coin_type, asset_unwrap.asset_id)
  }
}
