  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::asset_account {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use dubhe::dapp_key;

  use dubhe::dapp_key::DappKey;

  use dubhe::account_status;

  use dubhe::account_status::{AccountStatus};

  const TABLE_NAME: vector<u8> = b"asset_account";

  const TABLE_TYPE: vector<u8> = b"Resource";

  const OFFCHAIN: bool = false;

  public struct AssetAccount has copy, drop, store {
    balance: u256,
    status: AccountStatus,
  }

  public fun new(balance: u256, status: AccountStatus): AssetAccount {
    AssetAccount {
            balance,
            status,
        }
  }

  public fun balance(self: &AssetAccount): u256 {
    self.balance
  }

  public fun status(self: &AssetAccount): AccountStatus {
    self.status
  }

  public fun update_balance(self: &mut AssetAccount, balance: u256) {
    self.balance = balance
  }

  public fun update_status(self: &mut AssetAccount, status: AccountStatus) {
    self.status = status
  }

  public fun get_table_id(): String {
    string(TABLE_NAME)
  }

  public fun get_key_schemas(): vector<String> {
    vector[string(b"address"),
    string(b"address")
    ]
  }

  public fun get_value_schemas(): vector<String> {
    vector[string(b"u256"),
    string(b"AccountStatus")
    ]
  }

  public fun get_key_names(): vector<String> {
    vector[string(b"asset_id"),
    string(b"account")
    ]
  }

  public fun get_value_names(): vector<String> {
    vector[string(b"balance"),
    string(b"status")
    ]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub,
             dapp_key,
            string(TABLE_TYPE),
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            OFFCHAIN,
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, asset_id: address, account: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, asset_id: address, account: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, asset_id: address, account: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub, asset_id: address, account: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, OFFCHAIN);
  }

  public fun get_balance(dapp_hub: &DappHub, asset_id: address, account: address): u256 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let balance = sui::bcs::peel_u256(&mut bsc_type);
    balance
  }

  public(package) fun set_balance(dapp_hub: &mut DappHub, asset_id: address, account: address, balance: u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value = to_bytes(&balance);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value, OFFCHAIN);
  }

  public fun get_status(dapp_hub: &DappHub, asset_id: address, account: address): AccountStatus {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let status = dubhe::account_status::decode(&mut bsc_type);
    status
  }

  public(package) fun set_status(dapp_hub: &mut DappHub, asset_id: address, account: address, status: AccountStatus) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value = dubhe::account_status::encode(status);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value, OFFCHAIN);
  }

  public fun get(dapp_hub: &DappHub, asset_id: address, account: address): (u256, AccountStatus) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let balance = sui::bcs::peel_u256(&mut bsc_type);
    let status = dubhe::account_status::decode(&mut bsc_type);
    (balance, status)
  }

  public(package) fun set(
    dapp_hub: &mut DappHub,
    asset_id: address,
    account: address,
    balance: u256,
    status: AccountStatus,
  ) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value_tuple = encode(balance, status);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun get_struct(dapp_hub: &DappHub, asset_id: address, account: address): AssetAccount {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public(package) fun set_struct(
    dapp_hub: &mut DappHub,
    asset_id: address,
    account: address,
    asset_account: AssetAccount,
  ) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&asset_id));
    key_tuple.push_back(to_bytes(&account));
    let value_tuple = encode_struct(asset_account);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun encode(balance: u256, status: AccountStatus): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&balance));
    value_tuple.push_back(dubhe::account_status::encode(status));
    value_tuple
  }

  public fun encode_struct(asset_account: AssetAccount): vector<vector<u8>> {
    encode(asset_account.balance, asset_account.status)
  }

  public fun decode(data: vector<u8>): AssetAccount {
    let mut bsc_type = sui::bcs::new(data);
    let balance = sui::bcs::peel_u256(&mut bsc_type);
    let status = dubhe::account_status::decode(&mut bsc_type);
    AssetAccount {
            balance,
            status,
        }
  }
}
