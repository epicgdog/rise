  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::dapp_fee_config {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use dubhe::dapp_key;

  use dubhe::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"dapp_fee_config";

  const TABLE_TYPE: vector<u8> = b"Resource";

  const OFFCHAIN: bool = false;

  public struct DappFeeConfig has copy, drop, store {
    free_credit: u256,
    base_fee: u256,
    byte_fee: u256,
  }

  public fun new(free_credit: u256, base_fee: u256, byte_fee: u256): DappFeeConfig {
    DappFeeConfig {
            free_credit,
            base_fee,
            byte_fee,
        }
  }

  public fun free_credit(self: &DappFeeConfig): u256 {
    self.free_credit
  }

  public fun base_fee(self: &DappFeeConfig): u256 {
    self.base_fee
  }

  public fun byte_fee(self: &DappFeeConfig): u256 {
    self.byte_fee
  }

  public fun update_free_credit(self: &mut DappFeeConfig, free_credit: u256) {
    self.free_credit = free_credit
  }

  public fun update_base_fee(self: &mut DappFeeConfig, base_fee: u256) {
    self.base_fee = base_fee
  }

  public fun update_byte_fee(self: &mut DappFeeConfig, byte_fee: u256) {
    self.byte_fee = byte_fee
  }

  public fun get_table_id(): String {
    string(TABLE_NAME)
  }

  public fun get_key_schemas(): vector<String> {
    vector[]
  }

  public fun get_value_schemas(): vector<String> {
    vector[string(b"u256"), string(b"u256"),
    string(b"u256")
    ]
  }

  public fun get_key_names(): vector<String> {
    vector[]
  }

  public fun get_value_names(): vector<String> {
    vector[string(b"free_credit"), string(b"base_fee"),
    string(b"byte_fee")
    ]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub,
             dapp_key,
            string(TABLE_TYPE),
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            OFFCHAIN,
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub) {
    let key_tuple = vector::empty();
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, OFFCHAIN);
  }

  public fun get_free_credit(dapp_hub: &DappHub): u256 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let free_credit = sui::bcs::peel_u256(&mut bsc_type);
    free_credit
  }

  public(package) fun set_free_credit(dapp_hub: &mut DappHub, free_credit: u256) {
    let key_tuple = vector::empty();
    let value = to_bytes(&free_credit);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value, OFFCHAIN);
  }

  public fun get_base_fee(dapp_hub: &DappHub): u256 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let base_fee = sui::bcs::peel_u256(&mut bsc_type);
    base_fee
  }

  public(package) fun set_base_fee(dapp_hub: &mut DappHub, base_fee: u256) {
    let key_tuple = vector::empty();
    let value = to_bytes(&base_fee);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value, OFFCHAIN);
  }

  public fun get_byte_fee(dapp_hub: &DappHub): u256 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2);
    let mut bsc_type = sui::bcs::new(value);
    let byte_fee = sui::bcs::peel_u256(&mut bsc_type);
    byte_fee
  }

  public(package) fun set_byte_fee(dapp_hub: &mut DappHub, byte_fee: u256) {
    let key_tuple = vector::empty();
    let value = to_bytes(&byte_fee);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 2, value, OFFCHAIN);
  }

  public fun get(dapp_hub: &DappHub): (u256, u256, u256) {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let free_credit = sui::bcs::peel_u256(&mut bsc_type);
    let base_fee = sui::bcs::peel_u256(&mut bsc_type);
    let byte_fee = sui::bcs::peel_u256(&mut bsc_type);
    (free_credit, base_fee, byte_fee)
  }

  public(package) fun set(dapp_hub: &mut DappHub, free_credit: u256, base_fee: u256, byte_fee: u256) {
    let key_tuple = vector::empty();
    let value_tuple = encode(free_credit, base_fee, byte_fee);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun get_struct(dapp_hub: &DappHub): DappFeeConfig {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public(package) fun set_struct(dapp_hub: &mut DappHub, dapp_fee_config: DappFeeConfig) {
    let key_tuple = vector::empty();
    let value_tuple = encode_struct(dapp_fee_config);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun encode(free_credit: u256, base_fee: u256, byte_fee: u256): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&free_credit));
    value_tuple.push_back(to_bytes(&base_fee));
    value_tuple.push_back(to_bytes(&byte_fee));
    value_tuple
  }

  public fun encode_struct(dapp_fee_config: DappFeeConfig): vector<vector<u8>> {
    encode(dapp_fee_config.free_credit, dapp_fee_config.base_fee, dapp_fee_config.byte_fee)
  }

  public fun decode(data: vector<u8>): DappFeeConfig {
    let mut bsc_type = sui::bcs::new(data);
    let free_credit = sui::bcs::peel_u256(&mut bsc_type);
    let base_fee = sui::bcs::peel_u256(&mut bsc_type);
    let byte_fee = sui::bcs::peel_u256(&mut bsc_type);
    DappFeeConfig {
            free_credit,
            base_fee,
            byte_fee,
        }
  }
}
