  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::dapp_proxy {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use dubhe::dapp_key;

  use dubhe::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"dapp_proxy";

  const TABLE_TYPE: vector<u8> = b"Resource";

  const OFFCHAIN: bool = false;

  public struct DappProxy has copy, drop, store {
    delegator: address,
    enabled: bool,
  }

  public fun new(delegator: address, enabled: bool): DappProxy {
    DappProxy {
            delegator,
            enabled,
        }
  }

  public fun delegator(self: &DappProxy): address {
    self.delegator
  }

  public fun enabled(self: &DappProxy): bool {
    self.enabled
  }

  public fun update_delegator(self: &mut DappProxy, delegator: address) {
    self.delegator = delegator
  }

  public fun update_enabled(self: &mut DappProxy, enabled: bool) {
    self.enabled = enabled
  }

  public fun get_table_id(): String {
    string(TABLE_NAME)
  }

  public fun get_key_schemas(): vector<String> {
    vector[
    string(b"String")
    ]
  }

  public fun get_value_schemas(): vector<String> {
    vector[string(b"address"),
    string(b"bool")
    ]
  }

  public fun get_key_names(): vector<String> {
    vector[
    string(b"dapp_key")
    ]
  }

  public fun get_value_names(): vector<String> {
    vector[string(b"delegator"),
    string(b"enabled")
    ]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub,
             dapp_key,
            string(TABLE_TYPE),
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            OFFCHAIN,
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, dapp_key: String): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, dapp_key: String) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, dapp_key: String) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub, dapp_key: String) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, OFFCHAIN);
  }

  public fun get_delegator(dapp_hub: &DappHub, dapp_key: String): address {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let delegator = sui::bcs::peel_address(&mut bsc_type);
    delegator
  }

  public(package) fun set_delegator(dapp_hub: &mut DappHub, dapp_key: String, delegator: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&delegator);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value, OFFCHAIN);
  }

  public fun get_enabled(dapp_hub: &DappHub, dapp_key: String): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let enabled = sui::bcs::peel_bool(&mut bsc_type);
    enabled
  }

  public(package) fun set_enabled(dapp_hub: &mut DappHub, dapp_key: String, enabled: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value = to_bytes(&enabled);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value, OFFCHAIN);
  }

  public fun get(dapp_hub: &DappHub, dapp_key: String): (address, bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let delegator = sui::bcs::peel_address(&mut bsc_type);
    let enabled = sui::bcs::peel_bool(&mut bsc_type);
    (delegator, enabled)
  }

  public(package) fun set(dapp_hub: &mut DappHub, dapp_key: String, delegator: address, enabled: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = encode(delegator, enabled);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun get_struct(dapp_hub: &DappHub, dapp_key: String): DappProxy {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public(package) fun set_struct(dapp_hub: &mut DappHub, dapp_key: String, dapp_proxy: DappProxy) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&dapp_key));
    let value_tuple = encode_struct(dapp_proxy);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun encode(delegator: address, enabled: bool): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&delegator));
    value_tuple.push_back(to_bytes(&enabled));
    value_tuple
  }

  public fun encode_struct(dapp_proxy: DappProxy): vector<vector<u8>> {
    encode(dapp_proxy.delegator, dapp_proxy.enabled)
  }

  public fun decode(data: vector<u8>): DappProxy {
    let mut bsc_type = sui::bcs::new(data);
    let delegator = sui::bcs::peel_address(&mut bsc_type);
    let enabled = sui::bcs::peel_bool(&mut bsc_type);
    DappProxy {
            delegator,
            enabled,
        }
  }
}
