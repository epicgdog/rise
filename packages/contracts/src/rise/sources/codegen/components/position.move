  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module rise::position {

  use sui::bcs::{to_bytes};

  use std::ascii::{string, String, into_bytes};

  use dubhe::table_id;

  use dubhe::dapp_service::{Self, DappHub};

  use dubhe::dapp_system;

  use rise::dapp_key;

  use rise::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"position";

  const TABLE_TYPE: vector<u8> = b"Component";

  const OFFCHAIN: bool = false;

  public struct Position has copy, drop, store {
    x: u32,
    y: u32,
  }

  public fun new(x: u32, y: u32): Position {
    Position {
            x,
            y,
        }
  }

  public fun x(self: &Position): u32 {
    self.x
  }

  public fun y(self: &Position): u32 {
    self.y
  }

  public fun update_x(self: &mut Position, x: u32) {
    self.x = x
  }

  public fun update_y(self: &mut Position, y: u32) {
    self.y = y
  }

  public fun get_table_id(): String {
    string(TABLE_NAME)
  }

  public fun get_key_schemas(): vector<String> {
    vector[
    string(b"address")
    ]
  }

  public fun get_value_schemas(): vector<String> {
    vector[string(b"u32"),
    string(b"u32")
    ]
  }

  public fun get_key_names(): vector<String> {
    vector[
    string(b"entity_id")
    ]
  }

  public fun get_value_names(): vector<String> {
    vector[string(b"x"),
    string(b"y")
    ]
  }

  public(package) fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_system::register_table(
            dapp_hub,
             dapp_key,
            string(TABLE_TYPE),
            get_table_id(), 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            OFFCHAIN,
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, entity_id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public(package) fun delete(dapp_hub: &mut DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_system::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, OFFCHAIN);
  }

  public fun get_x(dapp_hub: &DappHub, entity_id: address): u32 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = dapp_system::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let x = sui::bcs::peel_u32(&mut bsc_type);
    x
  }

  public(package) fun set_x(dapp_hub: &mut DappHub, entity_id: address, x: u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = to_bytes(&x);
    dapp_system::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value, OFFCHAIN);
  }

  public fun get_y(dapp_hub: &DappHub, entity_id: address): u32 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = dapp_system::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let y = sui::bcs::peel_u32(&mut bsc_type);
    y
  }

  public(package) fun set_y(dapp_hub: &mut DappHub, entity_id: address, y: u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value = to_bytes(&y);
    dapp_system::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value, OFFCHAIN);
  }

  public fun get(dapp_hub: &DappHub, entity_id: address): (u32, u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = dapp_system::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let x = sui::bcs::peel_u32(&mut bsc_type);
    let y = sui::bcs::peel_u32(&mut bsc_type);
    (x, y)
  }

  public(package) fun set(dapp_hub: &mut DappHub, entity_id: address, x: u32, y: u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = encode(x, y);
    dapp_system::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun get_struct(dapp_hub: &DappHub, entity_id: address): Position {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = dapp_system::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public(package) fun set_struct(dapp_hub: &mut DappHub, entity_id: address, position: Position) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = encode_struct(position);
    dapp_system::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple, OFFCHAIN);
  }

  public fun encode(x: u32, y: u32): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&x));
    value_tuple.push_back(to_bytes(&y));
    value_tuple
  }

  public fun encode_struct(position: Position): vector<vector<u8>> {
    encode(position.x, position.y)
  }

  public fun decode(data: vector<u8>): Position {
    let mut bsc_type = sui::bcs::new(data);
    let x = sui::bcs::peel_u32(&mut bsc_type);
    let y = sui::bcs::peel_u32(&mut bsc_type);
    Position {
            x,
            y,
        }
  }
}
